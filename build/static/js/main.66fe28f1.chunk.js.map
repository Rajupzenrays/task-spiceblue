{"version":3,"sources":["context/AppReducer.js","context/GlobalState.js","components/UserList.js","components/Home.js","components/AddUser.js","components/EditUser.js","components/Heading.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","users","filter","user","id","payload","updateUser","updateUsers","map","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","removeUser","addUser","editUser","UserList","useContext","ListGroup","className","length","ListGroupItem","key","name","to","color","Button","onClick","Home","AddUser","useState","setName","history","useHistory","Form","onSubmit","e","preventDefault","newUser","uuid","push","FormGroup","Label","Input","onChange","target","placeholder","required","EditUser","props","selectedUser","setSelectedUser","currentUserId","match","params","useEffect","userId","find","Heading","Navbar","Container","NavbarBrand","href","Nav","NavItem","App","style","maxWidth","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.66fe28f1.chunk.js","sourcesContent":["export default (state, action) => {\n  switch (action.type) {\n    case 'REMOVE_USER':\n      return {\n        ...state,\n        users: state.users.filter(user => {\n          return user.id !== action.payload;\n        })\n      }\n    case 'ADD_USER':\n      return {\n        ...state,\n        users: [action.payload, ...state.users]\n      }\n    case 'EDIT_USER':\n      const updateUser = action.payload;\n\n      const updateUsers = state.users.map(user => {\n        if (user.id === updateUser.id) {\n          return updateUser;\n        }\n        return user;\n      })\n      return {\n        ...state,\n        users: updateUsers\n      }\n\n    default:\n      return state;\n  }\n}","import React, { createContext, useReducer } from 'react';\nimport AppReducer from './AppReducer';\n\n// Initial State\nconst initialState = {\n  users: []\n}\n\n// Create Context\nexport const GlobalContext = createContext(initialState);\n\n// Provider Component\nexport const GlobalProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n\n  // Actions\n  const removeUser = (id) => {\n    dispatch({\n      type: 'REMOVE_USER',\n      payload: id\n    })\n  }\n\n  const addUser = (user) => {\n    dispatch({\n      type: 'ADD_USER',\n      payload: user\n    })\n  }\n\n  const editUser = (user) => {\n    dispatch({\n      type: 'EDIT_USER',\n      payload: user\n    })\n  }\n\n  return (\n    <GlobalContext.Provider value={{\n      users: state.users,\n      removeUser,\n      addUser,\n      editUser\n    }}>\n      {children}\n    </GlobalContext.Provider>\n  )\n}","import React, { useContext } from 'react';\nimport { GlobalContext } from \"../context/GlobalState\";\nimport { Link } from \"react-router-dom\";\nimport {\n  ListGroup,\n  ListGroupItem,\n  Button\n} from \"reactstrap\";\n\nexport const UserList = () => {\n  const { users, removeUser } = useContext(GlobalContext);\n\n  return (\n    <ListGroup className=\"mt-4\">\n      {users.length > 0 ? (\n        <>\n          {users.map(user => (\n            <ListGroupItem className=\"d-flex\" key={user.id}>\n              <strong>{user.name}</strong>\n              <div className=\"ml-auto\">\n                <Link to={`/edit/${user.id}`} color=\"warning\" className=\"btn btn-warning mr-1\">Edit</Link>\n                <Button onClick={() => removeUser(user.id)} color=\"danger\">Delete</Button>\n              </div>\n            </ListGroupItem>\n          ))}\n        </>\n      ) : (\n          <h4 className=\"text-center\">No Task</h4>\n        )}\n    </ListGroup>\n  )\n}\n","import React from 'react';\nimport { UserList } from \"./UserList\";\n\nexport const Home = () => {\n  return (\n    <>\n     <UserList/>\n    </>\n  )\n}\n","import React, { useState, useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\nimport { v4 as uuid } from \"uuid\";\nimport \"./AddUser.css\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\n\nexport const AddUser = () => {\n  const [name, setName] = useState(\"\");\n  const { addUser } = useContext(GlobalContext);\n  const history = useHistory();\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const newUser = {\n      id: uuid(),\n      name,\n    };\n    addUser(newUser);\n    history.push(\"/\");\n  };\n\n  const onChange = (e) => {\n    setName(e.target.value);\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <FormGroup>\n        <Label>Task Description</Label>\n        <Input\n          type=\"text\"\n          value={name}\n          onChange={onChange}\n          name=\"name\"\n          placeholder=\"Enter Task\"\n          required\n        ></Input>\n\n\n<div className=\"datetime\">\n            <div className=\"date\">\n              <label className=\"label\">Date</label>\n              <br />\n\n              <input type=\"date\" name=\"date\"  />\n            </div>\n            <div className=\"time\">\n              <label className=\"label\">Time</label>\n              <br />\n\n              <input type=\"time\" name=\"time\" placeholder=\"Time\" />\n            </div>\n          </div>\n          <div className=\"dropdown\">\n            <label>Asign User</label>\n            <br />\n            <select type=\"list\" name=\"list\" className=\"list\" >\n              <option type=\"p1\">Prem Kumar</option>\n              <option type=\"p1\">Raju</option>\n              <option type=\"p1\">Max</option>\n            </select>\n          </div>\n      </FormGroup>\n      <div className=\"d-flex flex-row-reverse\">\n      <Button type=\"submit\" className=\"sBtn\">Submit</Button>\n      <Link to=\"/\" className=\"btn btn-danger mr-2\">\n        Cancel\n      </Link>\n      </div>\n    </Form>\n  );\n};\n","import React, { useState, useContext, useEffect } from 'react';\nimport { GlobalContext } from \"../context/GlobalState\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport {\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button\n} from \"reactstrap\";\n\nexport const EditUser = (props) => {\n  const { editUser, users } = useContext(GlobalContext);\n  const [selectedUser, setSelectedUser] = useState({\n    id: '',\n    name: ''\n  })\n  const history = useHistory();\n  const currentUserId = props.match.params.id;\n\n  useEffect(() => {\n    const userId = currentUserId;\n    const selectedUser = users.find(user => user.id === userId);\n    setSelectedUser(selectedUser);\n  }, [currentUserId, users])\n\n  const onChange = (e) => {\n    setSelectedUser({ ...selectedUser, [e.target.name]: e.target.value })\n  }\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    editUser(selectedUser);\n    history.push(\"/\")\n  }\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <FormGroup>\n        <Label>Name</Label>\n        <Input type=\"text\" value={selectedUser.name} onChange={onChange} name=\"name\" placeholder=\"Enter Task\" required></Input>\n      </FormGroup>\n      <Button type=\"submit\">Edit Name</Button>\n      <Link to=\"/\" className=\"btn btn-danger ml-2\">Cancel</Link>\n    </Form>\n  )\n}\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport './Heading.css'\nimport {\n  Navbar,\n  Nav,\n  NavItem,\n  NavbarBrand,\n  Container\n} from \"reactstrap\";\n\nexport const Heading = () => {\n  return (\n    <Navbar className=\"AddTaskMain\">\n      <Container>\n        <NavbarBrand href=\"/\">TASK</NavbarBrand>\n        <Nav>\n          <NavItem className=\" plus\">\n            <Link  to=\"/add\">+</Link>\n          </NavItem>\n        </Nav>\n\n      </Container>\n    </Navbar>\n  )\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Home } from \"./components/Home\";\nimport { AddUser } from \"./components/AddUser\";\nimport { EditUser } from \"./components/EditUser\";\nimport { GlobalProvider } from \"./context/GlobalState\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Heading } from './components/Heading';\n\nconst App = () => {\n  return (\n    <div style={{ maxWidth: \"30rem\", margin: \"4rem auto\" }}>\n      <GlobalProvider>\n        <Router>\n        <Heading/>\n          <Switch>\n            {/* <Route exact path=\"/\" component={() => <Home users={users} setUsers={setUsers} />} /> */}\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/add\" component={AddUser} />\n            <Route path=\"/edit/:id\" component={EditUser} />\n          </Switch>\n        </Router>\n      </GlobalProvider>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}